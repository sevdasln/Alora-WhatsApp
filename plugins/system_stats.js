	/* Copyright (C) 2021 xYAZUWA
Licensed under the  GPL-3.0 License;
you may not use this file except in compliance with the License.
Alora üõ†Ô∏è xRASHMITH
*/

const Asena = require('../events');
const {WAConnection, MessageOptions, MessageType, Mimetype} = require('@adiwajshing/baileys');
const fs = require("fs");
const path = require("path");
const chalk = require('chalk');
const { DataTypes } = require('sequelize');
const {spawnSync} = require('child_process');
const Config = require('../config');
const chalk = require('chalk');
const axios = require('axios');

const Language = require('../language');
const Lang = Language.getString('system_stats');



if (Config.WORKTYPE == 'private') {

    Asena.addCommand({pattern: 'alive', fromMe: true, desc: Lang.ALIVE_DESC,  deleteCommand: false}, (async (message, match) => {

        if (Config.ALIVEMSG == 'default') {
            
            var image = await axios.get ('https://i.ibb.co/SBDH0QV/20220114-180954.png', {responseType: 'arraybuffer'})
       
        await message.client.sendMessage (message.jid, Buffer.from (image.data), MessageType.image, {mimetype: Mimetype.png, caption: "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óÖ\n‚îÇ\n‚îÇüéß ú·¥á ü ü·¥è ·¥úÍú±·¥á Ä\n‚îÇ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇüë∏Ôº© Ôº°Ôº≠ A L I V E  \nüë∏  ‚îÇ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚îÇ\n‚îú‚ñ∫…™ ·¥Ä·¥ç ·¥Ä ü·¥è Ä·¥Ä  ô·¥è·¥õ\n‚îÇ\n‚îú‚ñª·¥†·¥á ÄÍú±…™·¥è…¥ - ·¥°…™·¥õ ú  ô·¥ú·¥õ·¥õ·¥è…¥Íú±\n‚îÇ\n‚îú‚ñª·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä - xYÃ∑AÃ∑ZÃ∑UÃ∑WÃ∑AÃ∑\n‚îÇ\n‚îú‚ñª·¥ç·¥á…¥·¥ú ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö - .alora\n‚îÇ\n‚îÇüíû·¥õ ú·¥Ä…¥·¥ã  è·¥è·¥ú Íú∞·¥è Ä ·¥úÍú±…™…¥…¢ ·¥ç·¥áüë∏\n‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñª\n\nŸÄŸÄŸÄŸ®ŸÄ€Å€ÅŸÄ‚ô°ŸÄŸ®ŸÄ€ÅŸÄ"})

    }
    else {
            
            var image = await axios.get ('https://i.ibb.co/SBDH0QV/20220114-180954.png', {responseType: 'arraybuffer'})
       
        await message.client.sendMessage (message.jid, Buffer.from (image.data), MessageType.image, {mimetype: Mimetype.png, caption: Config.ALIVEMSG + '\n\n*Copyright ¬© 2022 | Queen Alora*' })
     }
    }));

    Asena.addCommand({pattern: 'sysd', fromMe: true, desc: Lang.SYSD_DESC, dontAddCommandList: true,  deleteCommand: false}, (async (message, match) => {

        const child = spawnSync('neofetch', ['--stdout']).stdout.toString('utf-8')
        await message.sendMessage(
            '```' + child + '```', MessageType.text
        );
    }));

    Asena.addCommand({pattern: 'version', fromMe: true, desc: Lang.BOT_V,  deleteCommand: false}, (async (message, match) => {    
    
        await message.client.sendMessage(message.jid, 
                `*‚öù Queen Alora Version üé∂*\n\n` + 
                '```Installed version :```\n' +
                Lang.VERS_ION + 
                `\n\nCheck official website : https://www.alorabot.netlify.app/`
           , MessageType.text);
            
        }));
}
else if (Config.WORKTYPE == 'public') {

    Asena.addCommand({pattern: 'alive', fromMe: false, desc: Lang.ALIVE_DESC}, (async (message, match) => {

        if (Config.ALIVEMSG == 'default') {
            
            var image = await axios.get ('https://i.ibb.co/SBDH0QV/20220114-180954.png', {responseType: 'arraybuffer'})
       
        await message.client.sendMessage (message.jid, Buffer.from (image.data), MessageType.image, {mimetype: Mimetype.png, caption: "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óÖ\n‚îÇ\n‚îÇüéß ú·¥á ü ü·¥è ·¥úÍú±·¥á Ä\n‚îÇ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇüë∏Ôº© Ôº°Ôº≠ A L I V E  \nüë∏  ‚îÇ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n‚îÇ\n‚îú‚ñ∫…™ ·¥Ä·¥ç ·¥Ä ü·¥è Ä·¥Ä  ô·¥è·¥õ\n‚îÇ\n‚îú‚ñª·¥†·¥á ÄÍú±…™·¥è…¥ - ·¥°…™·¥õ ú  ô·¥ú·¥õ·¥õ·¥è…¥Íú±\n‚îÇ\n‚îú‚ñª·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä - xYÃ∑AÃ∑ZÃ∑UÃ∑WÃ∑AÃ∑\n‚îÇ\n‚îú‚ñª·¥ç·¥á…¥·¥ú ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö - .alora\n‚îÇ\n‚îÇüíû·¥õ ú·¥Ä…¥·¥ã  è·¥è·¥ú Íú∞·¥è Ä ·¥úÍú±…™…¥…¢ ·¥ç·¥áüë∏\n‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñª\n\nŸÄŸÄŸÄŸ®ŸÄ€Å€ÅŸÄ‚ô°ŸÄŸ®ŸÄ€ÅŸÄ"})

    }
    else {
            
            var image = await axios.get ('https://i.ibb.co/SBDH0QV/20220114-180954.png', {responseType: 'arraybuffer'})
       
        await message.client.sendMessage (message.jid, Buffer.from (image.data), MessageType.image, {mimetype: Mimetype.png, caption: Config.ALIVEMSG + '\n\n*Copyright ¬© 2022 | Queen Alora*' })
     }
    }));

    Asena.addCommand({pattern: 'sysd', fromMe: true, desc: Lang.SYSD_DESC, dontAddCommandList: true,  deleteCommand: false}, (async (message, match) => {

        const child = spawnSync('neofetch', ['--stdout']).stdout.toString('utf-8')
        await message.sendMessage(
            '```' + child + '```', MessageType.text
        );
    }));

    Asena.addCommand({pattern: 'version', fromMe: false, desc: Lang.BOT_V}, (async (message, match) => {    
    
        await message.client.sendMessage(message.jid, 
                `*‚öù Queen Alora Version ‚úÜ*\n\n` + 
                '```Installed version :```\n' +
                Lang.VERS_ION + 
                `\n\nCheck official website : https://www.alorabot.netlify.app/`
           , MessageType.text);
            
        }));
}
